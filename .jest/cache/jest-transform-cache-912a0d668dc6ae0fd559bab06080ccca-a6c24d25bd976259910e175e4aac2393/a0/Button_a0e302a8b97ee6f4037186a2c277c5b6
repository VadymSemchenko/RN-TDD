d138e6a1ecf06e187bf8f7c883775d92










'use strict';var _jsxFileName = "/Users/vadym/Documents/work/study/RN/tdd/node_modules/react-native/Libraries/Components/Button.js";var









































Button = function (_React$Component) {function Button() {babelHelpers.classCallCheck(this, Button);return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(Button).apply(this, arguments));}babelHelpers.createClass(Button, [{ key: "render", value: function render()







































    {var _this$props =








      this.props,accessibilityLabel = _this$props.accessibilityLabel,color = _this$props.color,onPress = _this$props.onPress,title = _this$props.title,hasTVPreferredFocus = _this$props.hasTVPreferredFocus,disabled = _this$props.disabled,testID = _this$props.testID;
      var buttonStyles = [styles.button];
      var textStyles = [styles.text];
      if (color) {
        if (require('Platform').OS === 'ios') {
          textStyles.push({ color: color });
        } else {
          buttonStyles.push({ backgroundColor: color });
        }
      }
      var accessibilityTraits = ['button'];
      if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
        accessibilityTraits.push('disabled');
      }
      require('fbjs/lib/invariant')(
      typeof title === 'string',
      'The title prop of a Button must be a string');

      var formattedTitle =
      require('Platform').OS === 'android' ? title.toUpperCase() : title;
      var Touchable =
      require('Platform').OS === 'android' ? require('TouchableNativeFeedback') : require('TouchableOpacity');
      return (
        require('React').createElement(Touchable, {
          accessibilityComponentType: "button",
          accessibilityLabel: accessibilityLabel,
          accessibilityTraits: accessibilityTraits,
          hasTVPreferredFocus: hasTVPreferredFocus,
          testID: testID,
          disabled: disabled,
          onPress: onPress, __source: { fileName: _jsxFileName, lineNumber: 127 } },
        require('React').createElement(require('View'), { style: buttonStyles, __source: { fileName: _jsxFileName, lineNumber: 135 } },
        require('React').createElement(require('Text'), { style: textStyles, disabled: disabled, __source: { fileName: _jsxFileName, lineNumber: 136 } },
        formattedTitle))));




    } }]);babelHelpers.inherits(Button, _React$Component);return Button;}(require('React').Component);Button.propTypes = { title: require('prop-types').string.isRequired, accessibilityLabel: require('prop-types').string, color: require('ColorPropType'), disabled: require('prop-types').bool, hasTVPreferredFocus: require('prop-types').bool, onPress: require('prop-types').func.isRequired, testID: require('prop-types').string };


var styles = require('StyleSheet').create({
  button: require('Platform').select({
    ios: {},
    android: {
      elevation: 4,

      backgroundColor: '#2196F3',
      borderRadius: 2 } }),


  text: require('Platform').select({
    ios: {

      color: '#007AFF',
      textAlign: 'center',
      padding: 8,
      fontSize: 18 },

    android: {
      color: 'white',
      textAlign: 'center',
      padding: 8,
      fontWeight: '500' } }),


  buttonDisabled: require('Platform').select({
    ios: {},
    android: {
      elevation: 0,
      backgroundColor: '#dfdfdf' } }),


  textDisabled: require('Platform').select({
    ios: {
      color: '#cdcdcd' },

    android: {
      color: '#a1a1a1' } }) });




module.exports = Button;